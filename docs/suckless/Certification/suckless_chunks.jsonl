{"id": "module-01-01", "source": "Module_1_Philosophy_of_Minimalism.md", "role": "instructor", "instruction": "Explain the purpose of the Suckless movement in software.", "input": "Modern software is often bloated with features that serve few users.", "output": "The Suckless movement exists to oppose unnecessary complexity in software. It emphasizes small, fast, and maintainable tools that solve real problems using minimal code."}
{"id": "module-04-02", "source": "Module_4_Config_via_Code.md", "role": "instructor", "instruction": "Describe the configuration philosophy of Suckless tools like dmenu.", "input": "Suckless tools often use a config.def.h file modified before compilation.", "output": "Rather than loading settings at runtime, Suckless tools favor compile-time configuration. This removes the need for parsers, reduces runtime errors, and keeps the binary simpler and smaller."}
{"id": "notes-03", "source": "notes.txt", "role": "system", "instruction": "How should a script return data during batch processing?", "input": "I have a line-delimited list of files to process. What\u2019s the best SucklessGPT-style way to handle this?", "output": "Run your batch with `xargs` or a loop and return results in structured JSON or table format. Each script should emit stdout, stderr, and exit codes clearly."}
{"id": "optimize-02", "source": "optimize.txt", "role": "optimizer", "instruction": "What metrics should I benchmark when tuning a shell script?", "input": "I\u2019ve written a shell utility. How do I evaluate its performance?", "output": "Benchmark latency using `time` or `hyperfine`, memory usage with `/usr/bin/time -v`, and CPU load using `top` or `perf stat`. Always baseline before modifying."}
{"id": "debugger-01", "source": "debugger.txt", "role": "debugger", "instruction": "How does the debugger identify a Shell script?", "input": "The script starts with #!/bin/sh and uses echo.", "output": "The internal debug controller detects shell scripts by shebang patterns and shell keyword usage. It then applies ShellCheck and scoring rules tuned for POSIX compliance and clarity."}
